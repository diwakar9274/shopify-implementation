continue
checkout_session['client_reference_id']
stripe_line_items[0]['quantity']
shopify.post('orders.json') do |req|
                            }] } }.to_json
                              quantity: stripe_line_items[0]['quantity']
                              variant_id: checkout_session['client_reference_id'],
                            line_items: [{
                            note: payment_id,
                            financial_status: 'paid',
      req.body = { order: { email: checkout_session['customer_details']['email'],
      req.headers['Content-Type'] = 'application/json'
shopify.post('orders.json') do |req|
checkout_session['customer_details']['email']
shopify = set_shopify_url
stripe_line_items
stripe_line_items = Stripe::Checkout::Session.list_line_items(checkout_session[:id])['data']
continue
@product
@product = Product.find_with_order(@order)
continue
@order = Order.find(params[:id])
continue
save_checkout_session(checkout_session)
@order
@payment
continue
save_checkout_session(checkout_session)
continue
order["financial_status"]
order["email"]
order["discount_applications"]
order["customer"]
order["current_total_tax_set"]
order["current_total_tax"]
order["line_items"]
order["id"]
order.id
order = JSON.parse(response.body)["order"]
order = JSON.parse response.body["order"]
order[""]
order = JSON.parse response.body
JSON.parse response.body
response.body["order"]
response.body
response.body["orders"]
response.body.
response.body.order
response.body
response.body["order"]["id"]
response.body[:order][:id]
response.body["order"][:id]
response.body["order"]
response.body
response.body.order
response.body
response
response["order"]
response.body.gsub('=>', ':')
response.body.gsub('=>', ':').gsub('\',' ')
response.body.gsub('=>', ':')
response.body.gsub('\', '')
response.body.gsub('=>', ':')
JSON.parse response
response
continue
stripe_line_items[0]["quantity"]
checkout_session["client_reference_id"]
checkout_session["customer_details"]["email"]
checkout_session
checkout_session.object
shopify = set_shopify_url
stripe_line_items = Stripe::Checkout::Session.list_line_items(params[:session_id])["data"]
checkout_session = Stripe::Checkout::Session.retrieve(params[:session_id])
continue
checkout_session["client_reference_id"]
checkout_session["payment_intent"]
continue
checkout_sessions["payment_intent"]
price_ids
continue
shopify_order["financial_status"]
continue
shopify_order["financial_status"]
continue
stripe_line_items[0]["quantity"]
stripe_line_items["quantity"]
stripe_line_items[:quantity]
stripe_line_items = Stripe::Checkout::Session.list_line_items(event.data.object["id"])["data"]
variant = Variant.find(event.data.object["client_reference_id"])
continue
redirect_to @session.url, allow_other_host: true
redirect_to @session.url
@session.url
continue
params[:title]
params[:order]
params
continue
@product
continue
@shopify_orders
@shopify_orders = @shopify_orders.select {|order| !order_ids.include?(order["id"])}
@shopify_orders
@shopify_orders = res["orders"]
res
res = JSON.parse shopify.get('orders.json?status=any').body.gsub('=>', ':')
continue
Order.all
continue
@orders = Order.all
continue
@option_values
@option_values.flatten!
@option_values
continue
option_values.flatten!
(option_values.flatten!).uniq!
continue
option_values
option_values.uniq!
option_values
option_values.flatten!
option_values
option_values.flatten.uniq!
option_values.flatten.uniq
option_values.flatten
option_values
option_values.push(option["values"])
option_values.flattenoption_values.push(option["values"])
option_values.flatten!.uniq!
option_values.push(option["values"])
option["values"]
continue
options.each {|o| puts o["values"] if o["name"] == option_name}
options.each {|o| puts o["name"] == option_name}
options.each {|o| puts o["name"]}
option_name
continue
end
  end
    option_values.push(option["values"])
  if option["name"] == option_name
options.each do |option|
option_values = []
options
options = Product.pluck(:options).flatten
options
option_values.flatten!.uniq!
continue
@option_values
continue
options
@option_values = []
options
options = Product.pluck(:options).flatten
@option_values = []
options = Product.pluck(:options).flatten
@target = params[:target]
@option_values
continue
@target
continue
option_names.values.flatten
option_names.values
option_names
option_names\
continue
option["values"].uniq
option_names[option["name"]] = option["values"].uniq
option["name"]
option_names[option["name"]]
option_names[o["name"]]
option_names[option["name"]]
continue
params
continue
params
continue
products.size
products = @all_products.where(product_id: result)
continue
@result.size
@result = @products.where(product_id: result)
@products.where(product_id: result).size
continue
@products = @products.where(product_id: result).size
@p = @products.where(product_id: result).size
@products.size
@products = @products.where(product_id: result).size
@products.where(product_id: result).size
result
result.size
result.first
@products.select {|product| result.include?(product.id)}
continue
)
status: shopify_product["status"],
options: shopify_product["options"],
images: shopify_product.fetch("image",{})&.fetch("src",nil),
tags: shopify_product["tags"],
vendor: shopify_product["vendor"],
body_html: shopify_product["body_html"],
title: shopify_product["title"],
handle: shopify_product["handle"],
product = Product.new(id: shopify_product["id"],
continue
)
status: shopify_product["status"],
options: shopify_product["options"],
images: shopify_product.fetch("image",{})&.fetch("src",nil),
tags: shopify_product["tags"],
vendor: shopify_product["vendor"],
body_html: shopify_product["body_html"],
title: shopify_product["title"],
handle: shopify_product["handle"],
id: shopify_product["id"],
product = Product.new(
)
status: shopify_product["status"],
options: shopify_product["options"],
images: shopify_product.fetch("image",{})&.fetch("src",nil),
tags: shopify_product["tags"],
vendor: shopify_product["vendor"],
body_html: shopify_product["body_html"],
title: shopify_product["title"],
handle: shopify_product["handle"],
id: shopify_product["id"],
product = Product.new(
continue
shopify_product["variants"]
shopify_product.variants
shopify_product
shopify_products
continue
shopify_order["current_total_tax_set"]
shopify_order["current_total_tax"]
shopify_order["line_items"]
shopify_order["id"]
continue
@shopify_orders.first["current_total_tax"]
@shopify_orders.first
@shopify_orders
continue
@shopify_orders.first["id"]
@shopify_orders.first.id
@shopify_orders.first
@shopify_orders
continue
res
res = JSON.parse shopify.get('orders.json?status=any').body.gsub('=>', ':')
\res = JSON.parse shopify.get('orders.json?status=any').body.gsub('=>', ':')
continue
res.status
res = shopify.get('/products.json')
